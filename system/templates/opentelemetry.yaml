{{- if .Values.opentelemetry.enabled }}
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: {{ .Values.argocd.project }}-opentelemetry
  namespace: {{ .Values.argocd.namespace }}
  annotations:
    argocd.argoproj.io/sync-wave: "1"
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  project: {{ .Values.argocd.project }}
  syncPolicy:
    automated:
      selfHeal: true
      prune: true
    syncOptions:
      - CreateNamespace=true
  destination:
    name: in-cluster
    namespace: {{ .Values.opentelemetry.namespace }}
  source:
    chart: opentelemetry-collector
    repoURL: https://open-telemetry.github.io/opentelemetry-helm-charts
    targetRevision: 0.12.0
    helm:
      releaseName: opentelemetry-collector
      values: |
        config:
          exporters:
            logging: {}
            prometheus:
              endpoint: "0.0.0.0:9090"
              send_timestamps: true
              metric_expiration: 180m
              resource_to_telemetry_conversion:
                enabled: false
            jaeger:
              endpoint: jaeger-collector.observability.svc:14250
              tls:
                insecure: true
          extensions:
            health_check: {}
            memory_ballast: {}
          processors:
            batch: {}
            # If set to null, will be overridden with values based on k8s resource limits
            memory_limiter: null
          receivers:
            jaeger:
              protocols:
                grpc:
                  endpoint: 0.0.0.0:14250
                thrift_http:
                  endpoint: 0.0.0.0:14268
                thrift_compact:
                  endpoint: 0.0.0.0:6831
            otlp:
              protocols:
                grpc:
                  endpoint: 0.0.0.0:4317
                http:
                  endpoint: 0.0.0.0:4318
            prometheus:
              config:
                scrape_configs:
                  - job_name: opentelemetry-collector
                    scrape_interval: 10s
                    static_configs:
                      - targets:
                          - ${MY_POD_IP}:8888
          service:
            telemetry:
              metrics:
                address: 0.0.0.0:8888
            extensions:
              - health_check
              - memory_ballast
            pipelines:
              metrics:
                exporters:
                  - prometheus
                processors:
                  - memory_limiter
                  - batch
                receivers:
                  - otlp
                  - prometheus
              traces:
                exporters:
                  - jaeger
                processors:
                  - memory_limiter
                  - batch
                receivers:
                  - otlp
                  - jaeger


        # Shared params for agentCollector daemonset and standaloneCollector deployment pods.
        # Can be overridden here or for any component independently using the same keys.

        image:
          # If you want to use the core image `otel/opentelemetry-collector`, you also need to change `command.name` value to `otelcol`.
          repository: otel/opentelemetry-collector-contrib
          pullPolicy: IfNotPresent
          # Overrides the image tag whose default is the chart appVersion.
          tag: ""
        imagePullSecrets: []

        # OpenTelemetry Collector executable
        command:
          name: otelcol-contrib
          extraArgs: []

        serviceAccount:
          # Specifies whether a service account should be created
          create: true
          # Annotations to add to the service account
          annotations: {}
          # The name of the service account to use.
          # If not set and create is true, a name is generated using the fullname template
          name: ""

        clusterRole:
          # Specifies whether a clusterRole should be created
          create: false
          # Annotations to add to the clusterRole
          annotations: {}
          # The name of the clusterRole to use.
          # If not set and create is true, a name is generated using the fullname template
          name: ""
          # A set of rules as documented here : https://kubernetes.io/docs/reference/access-authn-authz/rbac/
          rules: []
          # - apiGroups:
          #   - ''
          #   resources:
          #   - 'pods'
          #   - 'nodes'
          #   verbs:
          #   - 'get'
          #   - 'list'
          #   - 'watch'

          clusterRoleBinding:
            # Annotations to add to the clusterRoleBinding
            annotations: {}
            # The name of the clusterRoleBinding to use.
            # If not set and create is true, a name is generated using the fullname template
            name: ""

        podSecurityContext: {}
        securityContext: {}

        nodeSelector: {}
        tolerations: []
        affinity: {}

        # Allows for pod scheduler prioritisation
        # Can be overridden here or for agentCollector and standaloneCollector independently.
        priorityClassName: ""

        extraEnvs: []
        extraConfigMapMounts: []
        extraHostPathMounts: []
        secretMounts: []

        # Configuration for ports, shared between agentCollector, standaloneCollector and service.
        # Can be overridden here or for agentCollector and standaloneCollector independently.
        ports:
          otlp:
            enabled: true
            containerPort: 4317
            servicePort: 4317
            hostPort: 4317
            protocol: TCP
          otlp-http:
            enabled: true
            containerPort: 4318
            servicePort: 4318
            hostPort: 4318
            protocol: TCP
          jaeger-compact:
            enabled: true
            containerPort: 6831
            servicePort: 6831
            hostPort: 6831
            protocol: UDP
          jaeger-thrift:
            enabled: true
            containerPort: 14268
            servicePort: 14268
            hostPort: 14268
            protocol: TCP
          jaeger-grpc:
            enabled: true
            containerPort: 14250
            servicePort: 14250
            hostPort: 14250
            protocol: TCP
          prometheus:
            enabled: true
            containerPort: 9090
            servicePort: 9090
            protocol: TCP

        # Configuration for agent OpenTelemetry Collector daemonset, enabled by default
        agentCollector:
          enabled: true

          containerLogs:
            enabled: false

          resources:
            limits:
              cpu: 256m
              memory: 512Mi

          # Configuration override that will be merged into the agent's default config
          configOverride: {}
          # The following config override can be used to enable host receiver
          #   receivers:
          #     hostmetrics:
          #       scrapers:
          #         cpu:
          #         disk:
          #         filesystem:
          #   service:
          #     pipelines:
          #       metrics:
          #         receivers: [prometheus, hostmetrics]

        service:
          type: ClusterIP
          annotations: {}

        podMonitor:
          enabled: true
          metricsEndpoints:
            - port: prometheus

          # additional labels for the PodMonitor
          extraLabels: {}
          #   release: kube-prometheus-stack

        serviceMonitor:
          enabled: false
          metricsEndpoints: {}
          # - port: metrics
          #   interval: 15s

          # additional labels for the ServiceMonitor
          extraLabels: {}
          #  release: kube-prometheus-stack
{{- end }}
