{{- if .Values.cortex.enabled }}
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: {{ .Values.argocd.project }}-cortex
  namespace: {{ .Values.argocd.namespace }}
  annotations:
    argocd.argoproj.io/sync-wave: "5"
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  project: {{ .Values.argocd.project }}
  syncPolicy:
    automated:
      selfHeal: true
      prune: true
  destination:
    name: in-cluster
    namespace: {{ .Values.argocd.project }}
  source:
    chart: cortex
    repoURL: https://cortexproject.github.io/cortex-helm-chart
    targetRevision: 1.4.0
    helm:
      releaseName: cortex
      values: |
        ingress:
          enabled: true
          ingressClass:
            enabled: true
            name: "nginx"
          annotations:
            cert-manager.io/cluster-issuer: letsencrypt-prod
            external-dns.alpha.kubernetes.io/target: "{{ .Values.global.env }}-humble-tunnel.{{ .Values.global.domain }}"
            external-dns.alpha.kubernetes.io/cloudflare-proxied: "true"
          hosts:
            - host: &host cortex.{{ .Values.global.domain }}
              paths:
                - /
          tls:
            - secretName: cortex-tls-certificate
              hosts:
                - *host
        tags:
          # -- Set to true to enable block storage memcached caching
          blocks-storage-memcached: true
        alertmanager:
          enabled: true
        ruler:
          enabled: true

        nginx:
          enabled: true
          replicas: 2
          auth_orgs: ["humble"]
          config:
            setHeaders:
              X-Scope-OrgID: $remote_user
            # -- (optional) List of [auth tenants](https://cortexmetrics.io/docs/guides/auth/) to set in the nginx config
            auth_orgs:
              - remote-write-auth
          basicAuthSecretName: "{{ .Values.cortex.basicAuth.secretName }}"

        ingester:
          autoscaling:
            enabled: true
            minReplicas: 2
            maxReplicas: 3
          persistentVolume:
            enabled: false

          serviceMonitor:
            enabled: true

        distributor:
          autoscaling:
            enabled: true
            minReplicas: 2
            maxReplicas: 3
          persistentVolume:
            enabled: false

          serviceMonitor:
            enabled: true
        
        querier:
          replicas: 2

          serviceMonitor:
            enabled: true

        query_frontend:
          replicas: 2

          serviceMonitor:
            enabled: true

        table_manager:
          replicas: 1

          serviceMonitor:
            enabled: true

        compactor:
          enabled: true
          replicas: 1

          serviceMonitor:
            enabled: true

          persistentVolume:
            enabled: true
            size: 2Gi
            storageClass: longhorn

        store_gateway:
          replicas: 3

          serviceMonitor:
            enabled: true

          persistentVolume:
            enabled: true
            size: 2Gi
            storageClass: longhorn

        memcached:
          enabled: false
          architecture: "high-availability"
          replicaCount: 2

        # -- index read caching for legacy chunk storage engine
        memcached-index-read:
          enabled: false
          architecture: "high-availability"
          replicaCount: 2

        # -- index write caching for legacy chunk storage engine
        memcached-index-write:
          enabled: false
          architecture: "high-availability"
          replicaCount: 2

        memcached-frontend:
          enabled: false
          architecture: "high-availability"
          replicaCount: 2
          resources: {}

        memcached-blocks-index:
          architecture: "high-availability"
          replicaCount: 2

        memcached-blocks:
          architecture: "high-availability"
          replicaCount: 2

        memcached-blocks-metadata:
          # enabled/disabled via the tags.blocks-storage-memcached boolean
          architecture: "high-availability"
          replicaCount: 2
        
        config:
          auth_enabled: true
          storage:
            engine: blocks
            index_queries_cache_config:
              memcached:
                # -- How long keys stay in the memcache
                expiration: 1h
              memcached_client:
                # -- Maximum time to wait before giving up on memcached requests.
                timeout: 1s
          blocks_storage:
            backend: filesystem
            tsdb:
              dir: /data/tsdb
            bucket_store:
              sync_dir: /data/tsdb-sync
              bucket_index:
                enabled: true
          limits:
            ingestion_rate: 150000
            max_series_per_user: 0
            max_series_per_metric: 0
            accept_ha_samples: true
            ha_cluster_label: "prometheus"
            ha_replica_label: "prometheus_replica"
          distributor:
            ha_tracker:
              enable_ha_tracker: true
              kvstore:
                store: "consul"
                consul:
                  host: consul-consul-server.apps:8500
          ingester:
            lifecycler:
              ring:
                kvstore:
                  store: "consul"
                  consul:
                    host: consul-consul-server.apps:8500
{{- end }}
