{{- if .Values.vault.enabled }}
apiVersion: "vault.banzaicloud.com/v1alpha1"
kind: "Vault"
metadata:
  name: "vault"
spec:
  size: {{ .Values.vault.size }}
  image: vault:1.11.0
  # specify a custom bank-vaults image with bankVaultsImage:
  # bankVaultsImage: ghcr.io/banzaicloud/bank-vaults:latest

  # Common annotations for all created resources
  annotations:
    common/annotation: "true"

  # Vault Pods , Services and TLS Secret annotations
  vaultAnnotations:
    type/instance: "vault"

  # Vault Configurer Pods and Services annotations
  vaultConfigurerAnnotations:
    type/instance: "vaultconfigurer"

  # Vault Pods , Services and TLS Secret labels
  vaultLabels:
    example.com/log-format: "json"

  # Vault Configurer Pods and Services labels
  vaultConfigurerLabels:
    example.com/log-format: "string"

  # Specify the ServiceAccount where the Vault Pod and the Bank-Vaults configurer/unsealer is running
  serviceAccount: vault

  # Specify the Service's type where the Vault Service is exposed
  # Please note that some Ingress controllers like https://github.com/kubernetes/ingress-gce
  # forces you to expose your Service on a NodePort
  serviceType: ClusterIP

  ingress:
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-prod
    spec:
      ingressClassName: nginx
      rules:
        - host: &host vault.{{ .Values.global.domain }}
          http:
            paths:
              - backend:
                  service:
                    name: vault
                    port:
                      number: 8200
                path: /
                pathType: Prefix
      tls:
        - hosts:
            - *host
          secretName: vault-tls-certificate

  # Use local disk to store Vault file data, see config section.
  volumes:
    - name: vault-file
      persistentVolumeClaim:
        claimName: vault-file

  volumeMounts:
    - name: vault-file
      mountPath: /vault/file

  # Support for distributing the generated CA certificate Secret to other namespaces.
  # Define a list of namespaces or use ["*"] for all namespaces.
  caNamespaces:
    - "*"

  # Describe where you would like to store the Vault unseal keys and root token.
  unsealConfig:
    options:
      # The preFlightChecks flag enables unseal and root token storage tests
      # This is true by default
      preFlightChecks: true
      # The storeRootToken flag enables storing of root token in chosen storage
      # This is true by default
      storeRootToken: true
    kubernetes:
      secretNamespace: {{ .Release.Namespace }}

  # A YAML representation of a final vault config file.
  # See https://www.vaultproject.io/docs/configuration/ for more information.
  config:
    storage:
      file:
        path: "${ .Env.VAULT_STORAGE_FILE }" # An example how Vault config environment interpolation can be used
    listener:
      tcp:
        address: "0.0.0.0:8200"
        tls_disable: true
    # telemetry:
    #   statsd_address: localhost:9125
    ui: true

  # See: https://banzaicloud.com/docs/bank-vaults/cli-tool/#example-external-vault-configuration
  # The repository also contains a lot examples in the deploy/ and operator/deploy directories.
  externalConfig:
    policies:
      - name: allow_secrets
        rules: |
          path "secret/*" {
            capabilities = ["create", "read", "update", "delete", "list"]
          }
      - name: allow_humble_secrets
        rules: |
          path "humble/*" {
            capabilities = ["create", "read", "update", "delete", "list"]
          }
      - name: allow_pki
        rules: |
          path "pki/*" {
            capabilities = ["create", "read", "update", "delete", "list"]
          }
      - name: identity_userpass
        rules: |
          path "identity/*" {
            capabilities = [ "create", "read", "update", "delete", "list" ]
          }

          # To enable userpass auth method
          path "sys/auth/userpass" {
            capabilities = [ "create", "read", "update", "delete" ]
          }

          # To create a new user, "end-user" for userpass
          path "auth/userpass/users/*" {
            capabilities = [ "create", "read", "update", "delete", "list" ]
          }

    secrets:
      - path: humble
        type: kv
        description: General secrets.
        options:
          version: 2

    groups:
      - name: superadmin
        policies:
          - allow_secrets
          - identity_userpass
        metadata:
          privileged: true
        type: external


    group-aliases:
      - name: superadmin
        mountpath: token
        group: superadmin


    auth:
      - type: kubernetes
        roles:
          - name: default
            bound_service_account_names: ["default", "vault-secrets-webhook", "vault"]
            bound_service_account_namespaces: ["default", "system", "platform", "apps"]
            policies: ["allow_secrets", "allow_pki"]
            ttl: 1h

  vaultEnvsConfig:
    - name: VAULT_LOG_LEVEL
      value: info
    - name: VAULT_STORAGE_FILE
      value: "/vault/file"
  istioEnabled: false
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: vault-file
spec:
  storageClassName: {{ .Values.vault.storageClass }}
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: vault

---

kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: vault
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["*"]
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "update", "patch"]
---

kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: vault
roleRef:
  kind: Role
  name: vault
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: vault
---
# This binding allows the deployed Vault instance to authenticate clients
# through Kubernetes ServiceAccounts (if configured so).
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: vault-auth-delegator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
  - kind: ServiceAccount
    name: vault
    namespace: vault
{{- end }}
